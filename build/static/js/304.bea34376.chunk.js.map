{"version":3,"file":"static/js/304.bea34376.chunk.js","mappings":"uKAQOA,eAAeC,EAA6BC,GAA8E,IAAxEC,EAAcC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,MAAAG,OAAMC,4BAAkC,iBAE7G,MACMC,GADS,IAAIC,WACAC,gBAAgBT,EAAM,aACnCU,EAASC,MAAMC,KAAKL,EAAIM,iBAAiB,QACzCC,EAAiB,GAqBvB,OAnBAJ,EAAOK,SAAQC,IACb,MAAMC,EAAMD,EAAIE,aAAa,OAC7B,GAAID,GAAOA,EAAIE,WAAW,SAAU,CAClC,MAAMC,EAyBZtB,eAAkCuB,EAASpB,GAEzC,MAAMqB,QAAYC,MAAMF,GAClBG,QAAaF,EAAIE,OACjBC,EAAW,IAAIC,SACrBD,EAASE,OAAO,QAASH,EAAM,cAC/B,MAAMI,QAAiBC,EAAAA,EAAMC,KAAK7B,EAAgBwB,EAAU,CAC1DM,QAAS,CAAE,eAAgB,yBAE7B,OAAOH,EAASI,KAAKC,QACvB,CAnCsBC,CAAmBjB,EAAKhB,GACrCkC,MAAKC,IACJpB,EAAIqB,aAAa,MAAOD,EAAI,IAE7BE,OAAM,SACTxB,EAAeyB,KAAKnB,EACtB,WAGIoB,QAAQC,IAAI3B,GAElBJ,EAAOK,SAAQC,IACbA,EAAI0B,MAAMC,QAAU,QACpB3B,EAAI0B,MAAME,OAAS,YACnB5B,EAAI0B,MAAMG,SAAW,MAAM,IAEtBtC,EAAIuC,KAAKC,SAClB,C","sources":["utils/imageUploadReplace.js"],"sourcesContent":["import axios from 'axios';\n\n/**\n * Uploads all base64 images in HTML to the image upload API, replaces their srcs with returned URLs.\n * @param {string} html - HTML string with <img src=\"data:...\"> tags\n * @param {string} uploadEndpoint - API endpoint for image upload\n * @returns {Promise<string>} - HTML with <img> srcs replaced\n */\nexport async function uploadAndReplaceImagesInHtml(html, uploadEndpoint = `${process.env.REACT_APP_API_BASE_URL}/upload-image`) {\n  // Parse HTML\n  const parser = new DOMParser();\n  const doc = parser.parseFromString(html, 'text/html');\n  const images = Array.from(doc.querySelectorAll('img'));\n  const uploadPromises = [];\n\n  images.forEach(img => {\n    const src = img.getAttribute('src');\n    if (src && src.startsWith('data:')) {\n      const promise = uploadImageDataUrl(src, uploadEndpoint)\n        .then(url => {\n          img.setAttribute('src', url);\n        })\n        .catch(() => {}); // Optionally handle error\n      uploadPromises.push(promise);\n    }\n  });\n\n  await Promise.all(uploadPromises);\n  // Center all images by adding style\n  images.forEach(img => {\n    img.style.display = 'block';\n    img.style.margin = '16px auto';\n    img.style.maxWidth = '100%';\n  });\n  return doc.body.innerHTML;\n}\n\n/**\n * Uploads a base64 data URL to the backend and returns the image URL.\n * @param {string} dataUrl\n * @param {string} uploadEndpoint\n * @returns {Promise<string>} - Uploaded image URL\n */\nasync function uploadImageDataUrl(dataUrl, uploadEndpoint) {\n  // Convert dataURL to Blob\n  const res = await fetch(dataUrl);\n  const blob = await res.blob();\n  const formData = new FormData();\n  formData.append('image', blob, 'upload.png');\n  const response = await axios.post(uploadEndpoint, formData, {\n    headers: { 'Content-Type': 'multipart/form-data' }\n  });\n  return response.data.imageUrl;\n}\n"],"names":["async","uploadAndReplaceImagesInHtml","html","uploadEndpoint","arguments","length","undefined","concat","process","doc","DOMParser","parseFromString","images","Array","from","querySelectorAll","uploadPromises","forEach","img","src","getAttribute","startsWith","promise","dataUrl","res","fetch","blob","formData","FormData","append","response","axios","post","headers","data","imageUrl","uploadImageDataUrl","then","url","setAttribute","catch","push","Promise","all","style","display","margin","maxWidth","body","innerHTML"],"sourceRoot":""}