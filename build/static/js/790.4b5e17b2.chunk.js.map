{"version":3,"file":"static/js/790.4b5e17b2.chunk.js","mappings":"uKAYOA,eAAeC,EACpBC,GAEkB,IADlBC,EAAsBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,MAAAG,OAAMC,4BAAkC,iBAG9D,MACMC,GADS,IAAIC,WACAC,gBAAgBT,EAAM,aACnCU,EAASC,MAAMC,KAAKL,EAAIM,iBAAiB,QACzCC,EAAkC,GAqBxC,OAnBAJ,EAAOK,SAASC,IACd,MAAMC,EAAqBD,EAAIE,aAAa,OAC5C,GAAID,GAAOA,EAAIE,WAAW,SAAU,CAClC,MAAMC,EAyBZtB,eAAkCuB,EAAiBpB,GAEjD,MAAMqB,QAAsBC,MAAMF,GAC5BG,QAAmBF,EAAIE,OACvBC,EAAW,IAAIC,SACrBD,EAASE,OAAO,QAASH,EAAM,cAC/B,MAAMI,QAAqDC,EAAAA,EAAMC,KAAK7B,EAAgBwB,EAAU,CAC9FM,QAAS,CAAE,eAAgB,yBAE7B,OAAOH,EAASI,KAAKC,QACvB,CAnCsBC,CAAmBjB,EAAKhB,GACrCkC,MAAMC,IACLpB,EAAIqB,aAAa,MAAOD,EAAI,IAE7BE,OAAM,SACTxB,EAAeyB,KAAKnB,EACtB,WAGIoB,QAAQC,IAAI3B,GAElBJ,EAAOK,SAASC,IACdA,EAAI0B,MAAMC,QAAU,QACpB3B,EAAI0B,MAAME,OAAS,YACnB5B,EAAI0B,MAAMG,SAAW,MAAM,IAEtBtC,EAAIuC,KAAKC,SAClB,C","sources":["utils/imageUploadReplace.ts"],"sourcesContent":["import axios, { AxiosResponse } from 'axios';\n\ninterface ImageUploadResponse {\n  imageUrl: string;\n}\n\n/**\n * Uploads all base64 images in HTML to the image upload API, replaces their srcs with returned URLs.\n * @param html - HTML string with <img src=\"data:...\"> tags\n * @param uploadEndpoint - API endpoint for image upload\n * @returns HTML with <img> srcs replaced\n */\nexport async function uploadAndReplaceImagesInHtml(\n  html: string, \n  uploadEndpoint: string = `${process.env.REACT_APP_API_BASE_URL}/upload-image`\n): Promise<string> {\n  // Parse HTML\n  const parser = new DOMParser();\n  const doc = parser.parseFromString(html, 'text/html');\n  const images = Array.from(doc.querySelectorAll('img'));\n  const uploadPromises: Promise<void>[] = [];\n\n  images.forEach((img: HTMLImageElement) => {\n    const src: string | null = img.getAttribute('src');\n    if (src && src.startsWith('data:')) {\n      const promise = uploadImageDataUrl(src, uploadEndpoint)\n        .then((url: string) => {\n          img.setAttribute('src', url);\n        })\n        .catch(() => {}); // Optionally handle error\n      uploadPromises.push(promise);\n    }\n  });\n\n  await Promise.all(uploadPromises);\n  // Center all images by adding style\n  images.forEach((img: HTMLImageElement) => {\n    img.style.display = 'block';\n    img.style.margin = '16px auto';\n    img.style.maxWidth = '100%';\n  });\n  return doc.body.innerHTML;\n}\n\n/**\n * Uploads a base64 data URL to the backend and returns the image URL.\n * @param dataUrl - Base64 data URL\n * @param uploadEndpoint - API endpoint for image upload\n * @returns Uploaded image URL\n */\nasync function uploadImageDataUrl(dataUrl: string, uploadEndpoint: string): Promise<string> {\n  // Convert dataURL to Blob\n  const res: Response = await fetch(dataUrl);\n  const blob: Blob = await res.blob();\n  const formData = new FormData();\n  formData.append('image', blob, 'upload.png');\n  const response: AxiosResponse<ImageUploadResponse> = await axios.post(uploadEndpoint, formData, {\n    headers: { 'Content-Type': 'multipart/form-data' }\n  });\n  return response.data.imageUrl;\n}\n"],"names":["async","uploadAndReplaceImagesInHtml","html","uploadEndpoint","arguments","length","undefined","concat","process","doc","DOMParser","parseFromString","images","Array","from","querySelectorAll","uploadPromises","forEach","img","src","getAttribute","startsWith","promise","dataUrl","res","fetch","blob","formData","FormData","append","response","axios","post","headers","data","imageUrl","uploadImageDataUrl","then","url","setAttribute","catch","push","Promise","all","style","display","margin","maxWidth","body","innerHTML"],"sourceRoot":""}